(define test (lambda () (if (< 1 2) 3 4)))
(test)
(define multiply-by (lambda (n) (lambda (y) (* y n))))
(define doubler (multiply-by 2))
(define tripler (multiply-by 3))
(doubler 4)
(tripler 4)
(define add (lambda (x y) (+ x y)))
(add 22 33)
(define count-down-from (lambda (n) (lambda () (set! n (- n 1)))))
(define count-down-from-3 (count-down-from 3))
(define count-down-from-4 (count-down-from 4))
(count-down-from-3)
(count-down-from-4)
(count-down-from-3)
(count-down-from-3)
(count-down-from-4)
(count-down-from-4)
(count-down-from-4)
(define set-hidden 0)
(define get-hidden 0)
((lambda ()
        (begin
            (define hidden 0)
            (set! set-hidden (lambda (n) (set! hidden n)))
            (set! get-hidden (lambda () hidden)))))
(get-hidden)
(set-hidden 1234)
(get-hidden)
hidden
